name: Generate Release Notes

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'releases/MCProd_releases.csv'

permissions:
  contents: write # allow push 

jobs:
  generate:
    runs-on: [self-hosted, alibi-cvmfs]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for git history

      - name: Fetch base branch
        run: git fetch origin ${{ github.base_ref }} --depth=1

      - name: Extract tags
        id: extract
        run: |
          BASE=origin/${{ github.base_ref }}

          # get last line of this file in the HEAD version
          OLD_LINE=$(git show $BASE:releases/MCProd_releases.csv | tail -n 1)
          CURR_TAG=$(echo "$OLD_LINE" | cut -d',' -f2 | xargs)
          
          echo "Current tag is ${CURR_TAG}"
          echo "current_tag=${CURR_TAG}" >> $GITHUB_OUTPUT

          NEW_LINE=$(git diff $BASE...HEAD -- releases/MCProd_releases.csv \
            | grep '^+' | grep -v '^+++' | sed 's/^+//')

          CANDIDATE_TAG=$(echo "$NEW_LINE" | cut -d',' -f1 | xargs)
          FINAL_TAG=$(echo "$NEW_LINE" | cut -d',' -f2 | xargs)
          COMMENT=$(echo "$NEW_LINE" | cut -d',' -f3- | xargs)

          echo "candidate_tag=$CANDIDATE_TAG" >> $GITHUB_OUTPUT
          echo "final_tag=$FINAL_TAG" >> $GITHUB_OUTPUT
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT
      
      - name: Get release tag diff
        id: tags
        run: |
          # create a tmp file listing both software pieces on CVMFS
          CURR_TAG=${{ steps.extract.outputs.current_tag }}
          CAND_TAG=${{ steps.extract.outputs.candidate_tag }}
          
          # Checks if the package referenced as candidate_tag actually exists
          CVMFS_BASE_PATH="/cvmfs/alice.cern.ch/el9-x86_64/Packages/"   
          # replace :: with /
          CAND_TAG="${CAND_TAG//:://}"
          CURR_TAG="${CURR_TAG//:://}"

          echo "${CVMFS_BASE_PATH}/${CURR_TAG}" > compare-tags.txt
          echo "${CVMFS_BASE_PATH}/${CAND_TAG}" >> compare-tags.txt

          python3 workflow_scripts/get_release_tags.py compare-tags.txt > tags.json
        shell: bash

      - name: Summarize tag changes
        id: diff_summary
        run: |
          python3 workflow_scripts/parse_cvmfs_release_json.py tags.json > repo_deltas.json
          cat repo_deltas.json
        shell: bash

      - name: Get commits across repos
        id: commits
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip3 install pyyaml
          python3 workflow_scripts/extract_commits.py
          if [ ! -f release-notes.md ]; then
            exit 1
          fi
        shell: bash

      - name: Attach release notes
        run: |
            FINAL_TAG=${{ steps.extract.outputs.final_tag }}
            mv release-notes.md release-notes-${FINAL_TAG}.md
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add release-notes*.md
            git commit -m "Adding release notes" || echo "No changes to commit"
            git push origin HEAD:${{ github.head_ref }}

      # - name: Summarize commits with LLM
      #   id: summary
      #   run: |
      #     python3 scripts/summarize_commits.py commits.json > summary.md
      #   shell: bash

      # - name: Comment PR with release notes
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     python3 scripts/post_comment.py summary.md
