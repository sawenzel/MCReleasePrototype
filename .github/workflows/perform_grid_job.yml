name: Perform GRID job

on:
  pull_request:
    paths:
      - 'jobs/**'

jobs:
  alien-job-pipeline:
    runs-on: [self-hosted, alibi-cvmfs]
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      #- name: Dump env before anything
      #  run: env | sort
       
      - name: Find added files in jobs
        id: check
        run: |
          set -x
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          NEW_FILES=$(git diff --name-status "$BASE_SHA" "$HEAD_SHA" | grep '^A' | awk '{print $2}' | grep '^jobs/' || true)
          echo "new_files=$NEW_FILES" >> $GITHUB_OUTPUT
          echo "new_files=$NEW_FILES"

      - name: Determine job CVMFS package and check if package available
        id: cvmfs_package_check
        run: |
           # Checks if the package referenced in the job file exists
           PACKAGE=$(grep '^#JDL_PACKAGE' ${{ steps.check.outputs.new_files }} | sed 's/.*=//')
           echo "Job is asking for package ${PACKAGE}"
           
           # split package into root and version for checks on cvmfs
           PACKAGE_ROOT=$(echo "$PACKAGE" | awk -F'::' '{print $1}')
           PACKAGE_VERSION=$(echo "$PACKAGE" | awk -F'::' '{print $2}')
           echo "PACKAGE_ROOT: $PACKAGE_ROOT"
           echo "PACKAGE_VERSION: $PACKAGE_VERSION"
           CVMFS_BASE_PATH="/cvmfs/alice.cern.ch/el9-x86_64/Packages/${PACKAGE_ROOT:-notset}/${PACKAGE_VERSION:-notset}"
           echo "Checking for presence of ${CVMFS_BASE_PATH}"
           if [ -d "${CVMFS_BASE_PATH}" ]; then
              echo "Found CVFMS path"
           else
              echo "CMVFS Not found"
              exit 1
           fi

           # other checks can be added
           exit 0

      - name: Determine Alien Software Stack
        id: software_setup
        run: |
           /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20250430-1 > alien_env.env
           echo "alien_env_file=alien_env.env"
           
      - name: Test1
        if: github.event.pull_request # Only runs in PR context
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_BOT_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          COMMENT="✅ About to launch job"
          
          # curl -s -H "Authorization: token $GITHUB_TOKEN" \
          #      -H "Accept: application/vnd.github.v3+json" \
          #      -X POST \
          #      -d "$(jq -nc --arg body "$COMMENT" '{body: $body}')" \
          #      "https://api.github.com/repos/${REPO}/issues/${PR_NUMBER}/comments"
             
      
      - name: Submit job
        id: alien_submit
        run: |                                          
           source alien_env.env
           
           RAW_OUTPUT=$(${O2DPG_ROOT}/GRID/utils/grid_submit.sh --script ${{ steps.check.outputs.new_files }} --ttl 600 --prodsplit 1 2> submit_log.txt)
           
           # parse the jobs URL and PROCESS ID
           JOB_URL=$(grep 'display progress' submit_log.txt | awk '//{print $5}')
           echo "JOB URL is: ${JOB_URL}"
           if [ ! "${JOB_URL}" ]; then
             echo "Not good"
           fi
           echo "ALIEN_JOB_URL=${JOB_URL}" >> $GITHUB_OUTPUT

           # find out job id (make sure it is number ... take away extra chars like color etc)
           ALIEN_JOB_ID=$(echo ${JOB_URL} | sed 's/.*=//' | tr -cd '0-9')
           echo "alien_job_id=${ALIEN_JOB_ID}" >> $GITHUB_OUTPUT
           
      - name: Comment on PR
        if: github.event.pull_request # Only runs in PR context
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_BOT_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          COMMENT="✅ Job launched successfully here ${{ steps.alien_submit.outputs.alien_job_url }}"
          
          # curl -s -H "Authorization: token $GITHUB_TOKEN" \
          #      -H "Accept: application/vnd.github.v3+json" \
          #      -X POST \
          #      -d "$(jq -nc --arg body "$COMMENT" '{body: $body}')" \
          #      "https://api.github.com/repos/${REPO}/issues/${PR_NUMBER}/comments"
             
      - name: Wait job completion
        id: wait_alien
        shell: bash
        run: |
           source alien_env.env
           JOB_ID=${{ steps.alien_submit.outputs.alien_job_id }}
           echo "Waiting for job ${JOB_ID} to finish ..."
           for i in {1..60}; do
              JOBSTATUS=$(alien.py ps -j ${JOB_ID} 2>&1 | sed 's/^[[:space:]]*//' | tr -s ' ' | awk '{ print $3 }')
              # echo "Current status is ${JOBSTATUS}"
              if [ -z "$JOBSTATUS" ]; then
                echo "Warning: No job status found for job ${JOB_ID}"
              fi
              if [[ "${JOBSTATUS}" == "D" ]]; then
                echo "Job done"
                exit 0
              fi  
              sleep 10
           done
           exit 1

      - name: Check job success
        shell: bash
        run: |
           # We are now analysing failed/pass sub-jobs
           # (this is also done in O2DPG grid submit; consider modularizing)
           source alien_env.env
           JOB_ID=${{ steps.alien_submit.outputs.alien_job_id }}
           SUBJOBIDS=()
           SUBJOBSTATUSES=()
           while [ "${#SUBJOBIDS[@]}" == "0" ]; do
             QUERYRESULT=$(ALIENPY_JSON=true alien.py ps -a -m ${MY_JOBID})
             SUBJOBIDS=($(echo ${QUERYRESULT} | jq -r '.results[].id' | tr '\n' ' '))
             SUBJOBSTATUSES=($(echo ${QUERYRESULT} | jq -r '.results[].status' | tr '\n' ' '))
             sleep 1
           done
           
           LENGTH="${#SUBJOBIDS[@]}"
           echo "Have ${LENGTH} subjobs"
           donecounter=0
           failcounter=0
           for splitcounter in `seq 1 ${LENGTH}`; do
             let jobindex=splitcounter-1
             THIS_STATUS=${SUBJOBSTATUSES[jobindex]}
             THIS_JOB=${SUBJOBIDS[jobindex]}
             if [ "${THIS_STATUS}" == "DONE" ]; then
               let donecounter=donecounter+1
             else
	             let failcounter=failcounter+1
	           fi
           
           done
           if [[ donecounter > 0 ]]; then 
             exit 0
           fi
           exit 1
            
