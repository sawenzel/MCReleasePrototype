name: Perform GRID job

on:
  pull_request:
    paths:
      - 'jobs/**'

jobs:
  alien-job-pipeline:
    runs-on: [self-hosted, alibi-cvmfs]
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      #- name: Dump env before anything
      #  run: env | sort
       
      - name: Find added files in jobs
        id: check
        run: |
          set -x
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          NEW_FILES=$(git diff --name-status "$BASE_SHA" "$HEAD_SHA" | grep '^A' | awk '{print $2}' | grep '^jobs/' || true)
          echo "new_files=$NEW_FILES" >> $GITHUB_OUTPUT
          echo "new_files=$NEW_FILES"

      - name: Determine job CVMFS package and check if package available
        id: cvmfs_package_check
        run: |
           # Checks if the package referenced in the job file exists
           PACKAGE=$(grep '^#JDL_PACKAGE' ${{ steps.check.outputs.new_files }} | sed 's/.*=//')
           echo "Job is asking for package ${PACKAGE}"
           
           # split package into root and version for checks on cvmfs
           PACKAGE_ROOT=$(echo "$PACKAGE" | awk -F'::' '{print $1}')
           PACKAGE_VERSION=$(echo "$PACKAGE" | awk -F'::' '{print $2}')
           echo "PACKAGE_ROOT: $PACKAGE_ROOT"
           echo "PACKAGE_VERSION: $PACKAGE_VERSION"
           CVMFS_BASE_PATH="/cvmfs/alice.cern.ch/el9-x86_64/Packages/${PACKAGE_ROOT:-notset}/${PACKAGE_VERSION:-notset}"
           ls /cvmfs/

           echo "Checking for presence of ${CVMFS_BASE_PATH}"
           if [ -d "${CVMFS_BASE_PATH}" ]; then
              echo "Found CVFMS path"
           else
              echo "CMVFS Not found"
              exit 1
           fi

           # other checks can be added
           exit 0
           
      - name: Submit job
        id: alien_submit
        run: |
           /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20250430-1 > env.txt                                              
           source env.txt  
           
           RAW_OUTPUT=$(${O2DPG_ROOT}/GRID/utils/grid_submit.sh --script ${{ steps.check.outputs.new_files }} --ttl 600 --prodsplit 1)
           echo ${RAW_OUTPUT}
           
      - name: Wait job completion
        id: wait_alien
        run: |
           exit 0
      
